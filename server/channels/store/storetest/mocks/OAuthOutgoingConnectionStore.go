// Code generated by mockery v2.23.2. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	model "github.com/mattermost/mattermost/server/public/model"
	request "github.com/mattermost/mattermost/server/public/shared/request"
	mock "github.com/stretchr/testify/mock"
)

// OAuthOutgoingConnectionStore is an autogenerated mock type for the OAuthOutgoingConnectionStore type
type OAuthOutgoingConnectionStore struct {
	mock.Mock
}

// DeleteConnection provides a mock function with given fields: rctx, id
func (_m *OAuthOutgoingConnectionStore) DeleteConnection(rctx request.CTX, id string) error {
	ret := _m.Called(rctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(request.CTX, string) error); ok {
		r0 = rf(rctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetConnection provides a mock function with given fields: rctx, id
func (_m *OAuthOutgoingConnectionStore) GetConnection(rctx request.CTX, id string) (*model.OAuthOutgoingConnection, error) {
	ret := _m.Called(rctx, id)

	var r0 *model.OAuthOutgoingConnection
	var r1 error
	if rf, ok := ret.Get(0).(func(request.CTX, string) (*model.OAuthOutgoingConnection, error)); ok {
		return rf(rctx, id)
	}
	if rf, ok := ret.Get(0).(func(request.CTX, string) *model.OAuthOutgoingConnection); ok {
		r0 = rf(rctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.OAuthOutgoingConnection)
		}
	}

	if rf, ok := ret.Get(1).(func(request.CTX, string) error); ok {
		r1 = rf(rctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConnections provides a mock function with given fields: rctx, filters
func (_m *OAuthOutgoingConnectionStore) GetConnections(rctx request.CTX, filters model.OAuthOutgoingConnectionGetConnectionsFilter) ([]*model.OAuthOutgoingConnection, error) {
	ret := _m.Called(rctx, filters)

	var r0 []*model.OAuthOutgoingConnection
	var r1 error
	if rf, ok := ret.Get(0).(func(request.CTX, model.OAuthOutgoingConnectionGetConnectionsFilter) ([]*model.OAuthOutgoingConnection, error)); ok {
		return rf(rctx, filters)
	}
	if rf, ok := ret.Get(0).(func(request.CTX, model.OAuthOutgoingConnectionGetConnectionsFilter) []*model.OAuthOutgoingConnection); ok {
		r0 = rf(rctx, filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.OAuthOutgoingConnection)
		}
	}

	if rf, ok := ret.Get(1).(func(request.CTX, model.OAuthOutgoingConnectionGetConnectionsFilter) error); ok {
		r1 = rf(rctx, filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveConnection provides a mock function with given fields: rctx, conn
func (_m *OAuthOutgoingConnectionStore) SaveConnection(rctx request.CTX, conn *model.OAuthOutgoingConnection) (*model.OAuthOutgoingConnection, error) {
	ret := _m.Called(rctx, conn)

	var r0 *model.OAuthOutgoingConnection
	var r1 error
	if rf, ok := ret.Get(0).(func(request.CTX, *model.OAuthOutgoingConnection) (*model.OAuthOutgoingConnection, error)); ok {
		return rf(rctx, conn)
	}
	if rf, ok := ret.Get(0).(func(request.CTX, *model.OAuthOutgoingConnection) *model.OAuthOutgoingConnection); ok {
		r0 = rf(rctx, conn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.OAuthOutgoingConnection)
		}
	}

	if rf, ok := ret.Get(1).(func(request.CTX, *model.OAuthOutgoingConnection) error); ok {
		r1 = rf(rctx, conn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateConnection provides a mock function with given fields: rctx, conn
func (_m *OAuthOutgoingConnectionStore) UpdateConnection(rctx request.CTX, conn *model.OAuthOutgoingConnection) (*model.OAuthOutgoingConnection, error) {
	ret := _m.Called(rctx, conn)

	var r0 *model.OAuthOutgoingConnection
	var r1 error
	if rf, ok := ret.Get(0).(func(request.CTX, *model.OAuthOutgoingConnection) (*model.OAuthOutgoingConnection, error)); ok {
		return rf(rctx, conn)
	}
	if rf, ok := ret.Get(0).(func(request.CTX, *model.OAuthOutgoingConnection) *model.OAuthOutgoingConnection); ok {
		r0 = rf(rctx, conn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.OAuthOutgoingConnection)
		}
	}

	if rf, ok := ret.Get(1).(func(request.CTX, *model.OAuthOutgoingConnection) error); ok {
		r1 = rf(rctx, conn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewOAuthOutgoingConnectionStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewOAuthOutgoingConnectionStore creates a new instance of OAuthOutgoingConnectionStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOAuthOutgoingConnectionStore(t mockConstructorTestingTNewOAuthOutgoingConnectionStore) *OAuthOutgoingConnectionStore {
	mock := &OAuthOutgoingConnectionStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
